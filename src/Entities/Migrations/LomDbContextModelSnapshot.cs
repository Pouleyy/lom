// <auto-generated />
using System;
using Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(LomDbContext))]
    partial class LomDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Family", b =>
                {
                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_time");

                    b.Property<string>("GuildName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("guild_name");

                    b.Property<long>("LeaderId")
                        .HasColumnType("bigint")
                        .HasColumnName("leader_id");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("Notice")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("notice");

                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.HasKey("GuildId")
                        .HasName("families_pkey");

                    b.HasIndex("GuildName");

                    b.HasIndex("ServerId");

                    b.ToTable("families");
                });

            modelBuilder.Entity("Entities.Models.Player", b =>
                {
                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<long>("Attack")
                        .HasColumnType("bigint")
                        .HasColumnName("attack");

                    b.Property<int>("Combo")
                        .HasColumnType("integer")
                        .HasColumnName("combo");

                    b.Property<int>("ComboMultiplier")
                        .HasColumnType("integer")
                        .HasColumnName("combo_multiplier");

                    b.Property<int>("Counterstrike")
                        .HasColumnType("integer")
                        .HasColumnName("counterstrike");

                    b.Property<int>("CounterstrikeMultiplier")
                        .HasColumnType("integer")
                        .HasColumnName("counterstrike_multiplier");

                    b.Property<int>("CritMultiplier")
                        .HasColumnType("integer")
                        .HasColumnName("crit_multiplier");

                    b.Property<int>("CritRate")
                        .HasColumnType("integer")
                        .HasColumnName("crit_rate");

                    b.Property<int>("CritRes")
                        .HasColumnType("integer")
                        .HasColumnName("crit_res");

                    b.Property<long>("Defense")
                        .HasColumnType("bigint")
                        .HasColumnName("defense");

                    b.Property<int>("DonationWeekly")
                        .HasColumnType("integer")
                        .HasColumnName("donation_weekly");

                    b.Property<int>("Evasion")
                        .HasColumnType("integer")
                        .HasColumnName("evasion");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("guild_id");

                    b.Property<long>("Health")
                        .HasColumnType("bigint")
                        .HasColumnName("health");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_update");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("player_name");

                    b.Property<long>("Power")
                        .HasColumnType("bigint")
                        .HasColumnName("power");

                    b.Property<string>("ProfilePictureUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("Stun")
                        .HasColumnType("integer")
                        .HasColumnName("stun");

                    b.Property<string>("Uid")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("uid");

                    b.HasKey("PlayerId")
                        .HasName("players_pkey");

                    b.HasIndex("GuildId");

                    b.HasIndex("Power");

                    b.HasIndex("Uid");

                    b.ToTable("players");
                });

            modelBuilder.Entity("Entities.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("integer")
                        .HasColumnName("server_id");

                    b.Property<long?>("MinGuildId")
                        .HasColumnType("bigint")
                        .HasColumnName("min_guild_id");

                    b.Property<DateTime>("OpenedTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opened_time");

                    b.Property<int>("Region")
                        .HasColumnType("integer")
                        .HasColumnName("region");

                    b.Property<string>("ServerName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("server_name");

                    b.Property<string>("SubRegion")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("short_name");

                    b.HasKey("ServerId")
                        .HasName("servers_pkey");

                    b.HasIndex("ServerName");

                    b.HasIndex("SubRegion");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("Entities.Models.Family", b =>
                {
                    b.HasOne("Entities.Models.Server", "Server")
                        .WithMany("Families")
                        .HasForeignKey("ServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Entities.Models.Player", b =>
                {
                    b.HasOne("Entities.Models.Family", "Family")
                        .WithMany("Players")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Family");
                });

            modelBuilder.Entity("Entities.Models.Family", b =>
                {
                    b.Navigation("Players");
                });

            modelBuilder.Entity("Entities.Models.Server", b =>
                {
                    b.Navigation("Families");
                });
#pragma warning restore 612, 618
        }
    }
}
